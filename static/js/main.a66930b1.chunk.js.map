{"version":3,"sources":["components/APOD.tsx","components/Particles.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["APOD","NASA_KEY","process","useState","apod","setapod","useEffect","a","fetch","res","status","json","data","fetchPhoto","className","media_type","src","url","alt","title","frameBorder","allow","allowFullScreen","date","explanation","ParticlesBG","id","options","background","color","value","fullScreen","enable","zIndex","interactivity","events","onClick","mode","onHover","modes","bubble","distance","duration","opacity","size","grab","repulse","particles","links","move","attract","rotate","x","y","outModes","bottom","left","right","top","default","random","speed","number","density","minimumValue","min","max","animation","App","Particles","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMAiEeA,EA9DF,WAET,IAAMC,EAASC,2CAFA,EAaSC,mBAAyB,MAblC,mBAaRC,EAbQ,KAaFC,EAbE,KA6Bf,OAdAC,qBAAU,YACU,uCAAG,8BAAAC,EAAA,sEACGC,MAAM,+CAAD,OAAgDP,IADxD,cAEG,OADZQ,EADS,QAERC,QACHL,EAAQ,MAHG,SAKII,EAAIE,OALR,OAKTC,EALS,OAMfP,EAAQO,GANO,2CAAH,qDAQhBC,KACD,CAACZ,IAICG,EAGD,qCACI,qBAAKU,UAAU,QAAf,0CAGA,sBAAKA,UAAU,OAAf,UACqB,UAApBV,EAAKW,WAEF,qBAAKC,IAAKZ,EAAKa,IAAKC,IAAKd,EAAKe,MAAOL,UAAU,UAG/C,wBACIK,MAAM,cACNH,IAAKZ,EAAKa,IACVG,YAAY,IACZC,MAAM,kBACNC,iBAAe,EACfR,UAAU,UAIlB,gCACI,oBAAIA,UAAU,SAAd,SAAwBV,EAAKe,QAC7B,6BAAKf,EAAKmB,OACV,4BAAInB,EAAKoB,uBA1BH,yB,iBC2EPC,EAxGK,WAEhB,OACI,cAAC,IAAD,CACIC,GAAG,cACHC,QACI,CACIC,WAAY,CACRC,MAAO,CACHC,MAAO,YAGfC,WAAY,CACRC,QAAQ,EACRC,OAAQ,GAEZC,cAAe,CACXC,OAAQ,CACJC,QAAS,CACLJ,QAAQ,EACRK,KAAM,WAEdC,QAAS,CACLN,QAAQ,EACRK,KAAM,WAGNE,MAAO,CACHC,OAAQ,CACJC,SAAU,IACVC,SAAU,EACVC,QAAS,EACTC,KAAM,GAEdC,KAAM,CACFJ,SAAU,KAEdK,QAAS,CACLL,SAAU,OAIlBM,UAAW,CACPlB,MAAO,CACHC,MAAO,WAEXkB,MAAO,CACHnB,MAAO,CACHC,MAAO,WAEXW,SAAU,IACVE,QAAS,IAEbM,KAAM,CACFC,QAAS,CACLC,OAAQ,CACJC,EAAG,IACHC,EAAG,MAGXrB,QAAQ,EACRsB,SAAU,CACNC,OAAS,MACTC,KAAO,MACPC,MAAQ,MACRC,IAAM,MACNC,QAAU,OAEdC,QAAQ,EACRC,MAAO,GAEXC,OAAQ,CACJC,QAAS,CACL/B,QAAQ,GAEhBF,MAAO,KAEXa,QAAS,CACLiB,OAAQ,CACJ5B,QAAQ,EACRgC,aAAc,GAElBlC,MAAO,CACHmC,IAAK,EACLC,IAAK,GAETC,UAAW,CACPnC,QAAQ,EACR6B,MAAO,IAGfjB,KAAM,CACFgB,OAAQ,CACJ5B,QAAQ,EACRgC,aAAc,SC/E/BI,EAZH,WACV,OACE,gCACE,qBAAKtD,UAAU,aAAf,SACE,cAACuD,EAAD,MAEF,cAAC,EAAD,QCESC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.a66930b1.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\r\nimport './APOD.scss';\r\n\r\nconst APOD = () => {\r\n    \r\n    const NASA_KEY=process.env.REACT_APP_NASA_KEY;\r\n\r\n    interface apodObj {\r\n        title: string,\r\n        date: string,\r\n        image: string,\r\n        explanation: string,\r\n        url: string,\r\n        media_type: string\r\n    };\r\n\r\n    const [apod, setapod] = useState<apodObj | null>(null);\r\n\r\n    useEffect(() => { \r\n        const fetchPhoto = async () => {\r\n            const res = await fetch(`https://api.nasa.gov/planetary/apod?api_key=${NASA_KEY}`);\r\n            if(res.status !== 199){\r\n                setapod(null);\r\n            }\r\n            const data = await res.json();\r\n            setapod(data);\r\n        }  \r\n        fetchPhoto();\r\n    }, [NASA_KEY]);\r\n\r\n    \r\n\r\n    if (!apod) return <div></div>\r\n\r\n    return (\r\n        <>\r\n            <div className=\"title\">\r\n                Astronomy Picture of the Day\r\n            </div>\r\n            <div className=\"apod\"> \r\n            {apod.media_type === \"image\" ? \r\n            (\r\n                <img src={apod.url} alt={apod.title} className=\"image\"/>\r\n            ) : \r\n            (\r\n                <iframe\r\n                    title=\"space-video\"\r\n                    src={apod.url}\r\n                    frameBorder=\"0\"\r\n                    allow=\"encrypted-media\"\r\n                    allowFullScreen\r\n                    className=\"image\"\r\n                />\r\n            )\r\n        }\r\n            <div>\r\n                <h1 className=\"header\">{apod.title}</h1>\r\n                <h2>{apod.date}</h2>\r\n                <p>{apod.explanation}</p>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default APOD;","import React from 'react';\r\nimport Particles from \"react-tsparticles\";\r\n\r\nconst ParticlesBG = () => {\r\n\r\n    return (\r\n        <Particles\r\n            id=\"tsparticles\"\r\n            options={\r\n                {\r\n                    background: {\r\n                        color: {\r\n                            value: \"#232741\"\r\n                        },\r\n                    },\r\n                    fullScreen: {\r\n                        enable: true,\r\n                        zIndex: 1\r\n                    },\r\n                    interactivity: {\r\n                        events: {\r\n                            onClick: {\r\n                                enable: true,\r\n                                mode: \"repulse\"\r\n                            },\r\n                        onHover: {\r\n                            enable: true,\r\n                            mode: \"bubble\" \r\n                        }\r\n                        },\r\n                            modes: {\r\n                                bubble: {\r\n                                    distance: 250,\r\n                                    duration: 2,\r\n                                    opacity: 0,\r\n                                    size: 0\r\n                            },\r\n                            grab: {\r\n                                distance: 400\r\n                        },\r\n                            repulse: {\r\n                                distance: 400\r\n                        }\r\n                        }\r\n                    },\r\n                        particles: {\r\n                            color: {\r\n                                value: \"#ffffff\"\r\n                        },\r\n                            links: {\r\n                                color: {\r\n                                    value: \"#ffffff\"\r\n                            },\r\n                                distance: 150,\r\n                                opacity: 0.4\r\n                        },\r\n                            move: {\r\n                                attract: {\r\n                                    rotate: {\r\n                                        x: 600,\r\n                                        y: 600\r\n                                }\r\n                            },\r\n                                enable: true,\r\n                                outModes: {\r\n                                    bottom:  \"out\" ,\r\n                                    left:  \"out\" ,\r\n                                    right:  \"out\" ,\r\n                                    top:  \"out\" ,\r\n                                    default:  \"out\" ,\r\n                            },\r\n                                random: true,\r\n                                speed: 1\r\n                        },\r\n                            number: {\r\n                                density: {\r\n                                    enable: true\r\n                            },\r\n                            value: 160\r\n                        },\r\n                        opacity: {\r\n                            random: {\r\n                                enable: true,\r\n                                minimumValue: 0\r\n                            },\r\n                            value: {\r\n                                min: 0,\r\n                                max: 1\r\n                            },\r\n                            animation: {\r\n                                enable: true,\r\n                                speed: 1\r\n                            }\r\n                        },\r\n                        size: {\r\n                            random: {\r\n                                enable: true,\r\n                                minimumValue: 0\r\n                            },\r\n                        },\r\n                    }\r\n                }\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default ParticlesBG;","import React from 'react';\nimport './App.scss';\n\nimport APOD from './components/APOD';\nimport ParticlesBG from './components/Particles';\n\nconst App = () => {\n  return (\n    <div>\n      <div className=\"background\">\n        <ParticlesBG/>\n      </div>\n      <APOD />\n      \n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}