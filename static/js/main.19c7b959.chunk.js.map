{"version":3,"sources":["components/APOD.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["APOD","NASA_KEY","process","REACT_APP_NASA_KEY","console","log","useState","apod","setapod","useEffect","a","fetch","res","status","json","data","fetchPhoto","media_type","src","url","alt","title","className","frameBorder","allow","allowFullScreen","date","explanation","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOA8DeA,EA1DF,WAET,IAAMC,EAASC,wIAAYC,mBAC3BC,QAAQC,IAAIJ,GAHG,MAcSK,mBAAyB,MAdlC,mBAcRC,EAdQ,KAcFC,EAdE,KA8Bf,OAdAC,qBAAU,YACU,uCAAG,8BAAAC,EAAA,sEACGC,MAAM,+CAAD,OAAgDV,IADxD,cAEG,OADZW,EADS,QAERC,QACHL,EAAQ,MAHG,SAKII,EAAIE,OALR,OAKTC,EALS,OAMfP,EAAQO,GANO,2CAAH,qDAQhBC,KACD,CAACf,IAICM,EAGD,qCACqB,UAApBA,EAAKU,WAEF,qBAAKC,IAAKX,EAAKY,IAAKC,IAAKb,EAAKc,MAAOC,UAAU,UAG/C,wBACID,MAAM,cACNH,IAAKX,EAAKY,IACVI,YAAY,IACZC,MAAM,kBACNC,iBAAe,EACfH,UAAU,UAIlB,gCACI,6BAAKf,EAAKc,QACV,6BAAKd,EAAKmB,OACV,4BAAInB,EAAKoB,oBAtBC,yBCtBPC,EARH,WACV,OACE,8BACE,cAAC,EAAD,OCOSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.19c7b959.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\n// import ParticlesBG from './Particles';\r\nimport './APOD.scss';\r\n\r\nconst APOD = () => {\r\n    \r\n    const NASA_KEY=process.env.REACT_APP_NASA_KEY\r\n    console.log(NASA_KEY);\r\n\r\n    interface apodObj {\r\n        title: string,\r\n        date: string,\r\n        image: string,\r\n        explanation: string,\r\n        url: string,\r\n        media_type: string\r\n    };\r\n\r\n    const [apod, setapod] = useState<apodObj | null>(null);\r\n\r\n    useEffect(() => { \r\n        const fetchPhoto = async () => {\r\n            const res = await fetch(`https://api.nasa.gov/planetary/apod?api_key=${NASA_KEY}`);\r\n            if(res.status !== 199){\r\n                setapod(null);\r\n            }\r\n            const data = await res.json();\r\n            setapod(data);\r\n        }  \r\n        fetchPhoto();\r\n    }, [NASA_KEY]);\r\n\r\n    \r\n\r\n    if (!apod) return <div></div>\r\n\r\n    return (\r\n        <> \r\n        {apod.media_type === \"image\" ? \r\n        (\r\n            <img src={apod.url} alt={apod.title} className=\"image\"/>\r\n        ) : \r\n        (\r\n            <iframe\r\n                title=\"space-video\"\r\n                src={apod.url}\r\n                frameBorder=\"0\"\r\n                allow=\"encrypted-media\"\r\n                allowFullScreen\r\n                className=\"image\"\r\n            />\r\n        )\r\n      }\r\n        <div>\r\n            <h1>{apod.title}</h1>\r\n            <h2>{apod.date}</h2>\r\n            <p>{apod.explanation}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default APOD;","import React from 'react';\n\nimport APOD from './components/APOD';\n\nconst App = () => {\n  return (\n    <div>\n      <APOD />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}